{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \"\u0421\u0440\u0435\u0434\u0441\u0442\u0432\u0430 Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\"","text":""},{"location":"#33422","title":"\u0421\u043a\u043e\u043a\u043e\u0432\u0430 \u0410\u043b\u0438\u043d\u0430, \u0433\u0440. \u041a33422","text":""},{"location":"leetcode/","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0438\u0437 \u043a\u0443\u0440\u0441\u0430 Top Interview Questions \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f","text":""},{"location":"leetcode/#1-3sum","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1. 3Sum","text":"<p>Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.</p> <p>Notice that the solution set must not contain duplicate triplets.</p> <p>Constraints:</p> <ul> <li>3 &lt;= nums.length &lt;= 3000</li> <li>-10^(5) &lt;= nums[i] &lt;= 10^(5)</li> </ul> <pre><code>class Solution:\n    def threeSum(self, nums: List[int]) -&gt; List[List[int]]:\n        res = []\n        nums.sort()\n        for i, a in enumerate(nums):\n            if i &gt; 0 and a == nums[i - 1]:\n                continue\n            l, r = i + 1, len(nums) - 1\n            while l &lt; r:\n                threeSum = a + nums[l] + nums[r]\n                if threeSum &gt; 0:\n                    r -= 1\n                elif threeSum &lt; 0:\n                    l += 1\n                else:\n                    res.append([a, nums[l], nums[r]])\n                    l += 1\n                    while nums[l] == nums[l - 1] and l &lt; r:\n                        l += 1\n        return res\n</code></pre>"},{"location":"leetcode/#2-set-matrix-zeroes","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2. Set Matrix Zeroes","text":"<p>Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.</p> <p>You must do it in place.</p> <p>Constraints:</p> <ul> <li>m == matrix.length</li> <li>n == matrix[0].length</li> <li>1 &lt;= m, n &lt;= 200</li> <li>-2^(31) &lt;= matrix[i][j] &lt;= 2^(31) - 1</li> </ul> <pre><code>class Solution:\n    def setZeroes(self, matrix: List[List[int]]) -&gt; None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        rows, cols = len(matrix), len(matrix[0])\n        rowZero = False\n        for r in range(rows):\n            for c in range(cols):\n                if matrix[r][c] == 0:\n                    matrix[0][c] = 0\n                    if r &gt; 0:\n                        matrix[r][0] = 0\n                    else:\n                        rowZero = True\n        for r in range(1, rows):\n            for c in range(1, cols):\n                if matrix[0][c] == 0 or matrix[r][0] == 0:\n                    matrix[r][c] = 0\n        if matrix[0][0] == 0:\n            for r in range(rows):\n                matrix[r][0] = 0\n        if rowZero:\n            for c in range(cols):\n                matrix[0][c] = 0\n</code></pre>"},{"location":"leetcode/#3-group-anagrams","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3. Group Anagrams","text":"<p>Given an array of strings strs, group the anagrams together. You can return the answer in any order.</p> <p>Constraints:</p> <ul> <li>1 &lt;= strs.length &lt;= 10^(4)</li> <li>0 &lt;= strs[i].length &lt;= 100</li> <li>strs[i] consists of lowercase English letters.</li> </ul> <pre><code>class Solution:\n    def groupAnagrams(self, strs: List[str]) -&gt; List[List[str]]:\n        res = {}\n        for s in strs:\n            count = [0] * 26 # a...z\n            for c in s:\n                count[ord(c) - ord(\"a\")] += 1\n            key = tuple(count)\n            if key in res:\n                res[key].append(s)\n            else:\n                res[key] = [s]\n        return list(res.values())\n</code></pre>"},{"location":"leetcode/#4-longest-substring-without-repeating-characters","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4. Longest Substring Without Repeating Characters","text":"<p>Given a string s, find the length of the longest substring without repeating characters.</p> <p>Constraints:</p> <ul> <li>0 &lt;= s.length &lt;= 5 * 10^(4)</li> <li>s consists of English letters, digits, symbols and spaces.</li> </ul> <pre><code>class Solution:\n    def lengthOfLongestSubstring(self, s: str) -&gt; int:\n        charSet = set()\n        l = 0 # \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u0434\u043b\u044f \u043c\u0435\u0442\u043e\u0434\u0430 \u0441\u043a\u043e\u043b\u044c\u0437\u044f\u0449\u0435\u0433\u043e \u043e\u043a\u043d\u0430\n        res = 0\n        for r in range(len(s)):\n            while s[r] in charSet:\n                charSet.remove(s[l])\n                l += 1\n            charSet.add(s[r])\n            res = max(res, r - l + 1)\n        return res\n</code></pre>"},{"location":"leetcode/#5-longest-palindromic-substring","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5. Longest Palindromic Substring","text":"<p>Given a string s, return the longest palindromic substring in s.</p> <p>Constraints:</p> <ul> <li>1 &lt;= s.length &lt;= 1000</li> <li>s consist of only digits and English letters.</li> </ul> <pre><code>class Solution:\n    def longestPalindrome(self, s: str) -&gt; str:\n        res = ''\n        resLen = 0\n        for i in range(len(s)):\n            # \u043d\u0435\u0447\u0435\u0442\u043d\u0430\u044f \u0434\u043b\u0438\u043d\u0430\n            l, r = i, i  # \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0432 \u0441\u0435\u0440\u0435\u0434\u0438\u043d\u0435\n            while l &gt;= 0 and r &lt; len(s) and s[l] == s[r]: # \u043f\u043e\u043a\u0430 \u044d\u0442\u043e \u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c\n                if (r - l + 1) &gt; resLen:\n                    res = s[l:r+1]\n                    resLen = r - l + 1\n                l -= 1\n                r += 1\n\n            # \u0447\u0435\u0442\u043d\u0430\u044f \u0434\u043b\u0438\u043d\u0430\n            l, r = i, i + 1\n            while l &gt;= 0 and r &lt; len(s) and s[l] == s[r]:\n                if  (r - l + 1) &gt; resLen:\n                    res = s[l:r+1]\n                    resLen = r - l + 1\n                l -= 1\n                r += 1\n        return res\n</code></pre>"},{"location":"leetcode/#6-increasing-triplet-subsequence","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 6. Increasing Triplet Subsequence","text":"<p>Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i &lt; j &lt; k and nums[i] &lt; nums[j] &lt; nums[k]. If no such indices exists, return false.</p> <p>Constraints:</p> <ul> <li>1 &lt;= nums.length &lt;= 5 * 10^(5)</li> <li>-2^(31) &lt;= nums[i] &lt;= 2^(31) - 1</li> </ul> <pre><code>class Solution:\n    def increasingTriplet(self, nums: List[int]) -&gt; bool:\n        smallest = float('inf')\n        middle = float('inf')\n        for num in nums:\n            if num &gt; middle:\n                return True\n            if num &lt;= smallest:\n                smallest = num\n            else:\n                middle = num\n        return False\n</code></pre>"},{"location":"leetcode/#7-happy-number","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 7. Happy Number","text":"<p>Write an algorithm to determine if a number n is happy.</p> <p>A happy number is a number defined by the following process:</p> <ul> <li>Starting with any positive integer, replace the number by the sum of the squares of its digits.</li> <li>Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.</li> <li>Those numbers for which this process ends in 1 are happy.</li> </ul> <p>Return true if n is a happy number, and false if not.</p> <p>Constraints:</p> <ul> <li>1 &lt;= n &lt;= 2^(31) - 1</li> </ul> <pre><code>class Solution:\n    def isHappy(self, n: int) -&gt; bool:\n        res = []\n        while n not in res: # \u043f\u043e\u043a\u0430 \u043d\u0435\u0442 \u043f\u0435\u0442\u043b\u0438\n            res.append(n)\n            sum_sq_dig = sum([int(i) ** 2 for i in str(n)])\n            if sum_sq_dig == 1:\n                return True\n            n = sum_sq_dig\n        return False\n</code></pre>"},{"location":"leetcode/#8-factorial-trailing-zeroes","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 8. Factorial Trailing Zeroes","text":"<p>Given an integer n, return the number of trailing zeroes in n!.</p> <p>Note that n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1.</p> <p>Constraints:</p> <ul> <li>0 &lt;= n &lt;= 10^(4)</li> </ul> <pre><code>class Solution:\n    def trailingZeroes(self, n: int) -&gt; int:\n        res = 0\n        while n &gt;= 5:\n            n //= 5 \n            res += n # \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u044f\u0442\u0435\u0440\u043e\u043a \u0447\u0438\u0441\u043b\u043e \u0432\u043c\u0435\u0449\u0430\u0435\u0442, \u0434\u0432\u043e\u0439\u043a\u0438 \u0435\u0441\u0442\u044c \u0432\u0441\u0435\u0433\u0434\u0430 \u0432 \u043f\u044f\u0442\u0435\u0440\u043a\u0435, \u0442.\u043a. \u0447\u0435\u0442\u043d\u044b\u0435\n        return res\n</code></pre>"},{"location":"leetcode/#9-excel-sheet-column-number","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 9. Excel Sheet Column Number","text":"<p>Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.</p> <p>For example:</p> <p>A -&gt; 1</p> <p>B -&gt; 2</p> <p>C -&gt; 3</p> <p>...</p> <p>Z -&gt; 26</p> <p>AA -&gt; 27</p> <p>AB -&gt; 28 </p> <p>...</p> <p>Constraints:</p> <ul> <li>1 &lt;= columnTitle.length &lt;= 7</li> <li>columnTitle consists only of uppercase English letters</li> <li>columnTitle is in the range [\"A\", \"FXSHRXW\"]</li> </ul> <pre><code>class Solution:\n    def titleToNumber(self, columnTitle: str) -&gt; int:\n        res = 0\n        for i in range(len(columnTitle)):\n            res += (ord(columnTitle[::-1][i]) - ord(\"A\") + 1) * (26 ** i)\n        return res\n</code></pre>"},{"location":"leetcode/#10-powx-n","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 10. Pow(x, n)","text":"<p>Implement pow(x, n), which calculates x raised to the power n.</p> <p>Constraints:</p> <ul> <li>-100.0 &lt; x &lt; 100.0</li> <li>-2^(31) &lt;= n &lt;= 2^(31)-1</li> <li>n is an integer.</li> <li>Either x is not zero or n &gt; 0</li> <li>-10^(4) &lt;= x^(n) &lt;= 10^(4)</li> </ul> <pre><code>class Solution:\n    def myPow(self, x: float, n: int) -&gt; float:\n        def helper(x, n):\n            if n == 0:\n                return 1\n            elif x == 0:\n                return 0\n            res = helper(x, n // 2)\n            return x * res * res if n % 2 else res * res\n        res = helper(x, abs(n))\n        return res if n &gt;= 0 else 1 / res\n</code></pre>"},{"location":"leetcode/#11-sqrtx","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 11. Sqrt(x)","text":"<p>Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.</p> <p>You must not use any built-in exponent function or operator.</p> <p>For example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.</p> <p>Constraints:</p> <ul> <li>0 &lt;= x &lt;= 2^(31) - 1</li> </ul> <pre><code>class Solution:\n    def mySqrt(self, x: int) -&gt; int:\n        l, r = 0, x\n        res = 0\n        while l &lt;= r:\n            m = l + ((r - l) // 2) # \u0441\u0435\u0440\u0435\u0434\u0438\u043d\u0430, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0432\u044b\u0439\u0442\u0438 \u0437\u0430 \u043f\u0440\u0435\u0434\u0435\u043b\u044b\n            if (m * m) &gt; x:\n                r = m - 1\n            elif (m * m) &lt; x:\n                l = m + 1\n                res = m # \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c\n            else:\n                return m\n        return res\n</code></pre>"},{"location":"leetcode/#12-sum-of-two-integers","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 12. Sum of Two Integers","text":"<p>Given two integers a and b, return the sum of the two integers without using the operators + and -.</p> <p>Constraints:</p> <ul> <li>-1000 &lt;= a, b &lt;= 1000</li> </ul> <pre><code>class Solution:\n    def getSum(self, a: int, b: int) -&gt; int:\n        if a &lt; 0 and b &lt; 0:\n            ll1 = [1] * abs(a)\n            ll2 = [1] * abs(b)\n            ll1.extend(ll2)\n            return -len(ll1) \n        elif a &gt;= 0 and b &gt;= 0:\n            ll1 = [1] * a\n            ll2 = [1] * b\n            ll1.extend(ll2)\n            return len(ll1)\n        else:\n            signs = {abs(min(a, b)): -1, abs(max(a, b)): 1}\n            lesser = min(abs(a), abs(b))\n            greater = max(abs(a), abs(b))\n            ll1 = [1] * greater\n            ll2 = [1] * lesser\n            return len(ll1[len(ll2):]) * signs[greater]\n</code></pre>"},{"location":"lab1/auth_for_lab1/","title":"\u041a\u043e\u0434 \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f","text":"<pre><code>from fastapi import Security, HTTPException\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nfrom passlib.context import CryptContext\nimport jwt\nimport datetime\n\nfrom sqlmodel import Session, select\n\nfrom connection import engine\nfrom models import User\n\nclass AuthHandler:\n    security = HTTPBearer()\n    pwd_context = CryptContext(schemes=['bcrypt'])\n    secret = 'supersecret'\n\n    def get_password_hash(self, password):\n        return self.pwd_context.hash(password)\n\n    def verify_password(self, pwd, hashed_pwd):\n        return self.pwd_context.verify(pwd, hashed_pwd)\n\n    def encode_token(self, user_id):\n        payload = {\n            'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=12),\n            'iat': datetime.datetime.utcnow(), #issued at\n            'sub': user_id\n        }\n        return jwt.encode(payload, self.secret, algorithm='HS256')\n\n    def decode_token(self, token):\n        try:\n            payload = jwt.decode(token, self.secret, algorithms=['HS256'])\n            return payload['sub']\n        except jwt.ExpiredSignatureError:\n            raise HTTPException(status_code=401, detail='Expired signature')\n        except jwt.InvalidTokenError:\n            raise HTTPException(status_code=401, detail='Invalid token')\n\n    def auth_wrapper(self, auth: HTTPAuthorizationCredentials = Security(security)):\n        return self.decode_token(auth.credentials)\n\n    def get_current_user(self, auth: HTTPAuthorizationCredentials = Security(security)):\n        credentials_exception = HTTPException(status_code=401, detail='Could not validate credentials')\n        username = self.decode_token(auth.credentials)\n        if username is None:\n            raise credentials_exception\n        # user = find_user(username)\n        with Session(engine) as session:\n            user = session.exec(select(User).where(User.username == username)).first()\n        if user is None:\n            raise credentials_exception\n        return user\n</code></pre>"},{"location":"lab1/connection_for_lab1/","title":"\u041a\u043e\u0434 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0441 \u0411\u0414","text":"<pre><code>import os\nfrom dotenv import load_dotenv\nfrom sqlmodel import SQLModel, Session, create_engine\n\nload_dotenv()\ndb_url = os.getenv('DB_URL')\nengine = create_engine(db_url, echo=True)\n\n\ndef init_db():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n</code></pre>"},{"location":"lab1/main_for_lab1/","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b","text":"<pre><code>from fastapi import FastAPI, Depends, HTTPException\nfrom sqlmodel import select, join\nfrom typing import List\nfrom typing_extensions import TypedDict\n\nfrom connection import init_db, get_session\nfrom models import *\nfrom auth import AuthHandler\n\napp = FastAPI()\nauth_handler = AuthHandler()\n\n@app.on_event(\"startup\")\ndef on_startup():\n    init_db()\n\n# API Book\n\n@app.post(\"/book\", tags=['book'])\ndef book_create(book: BookDefault, session=Depends(get_session), user=Depends(auth_handler.get_current_user)) -&gt; TypedDict('Response', {\"status\": int, \"data\": Book}):\n    db_library = session.get(Library, book.library_id)\n    if not db_library:\n        raise HTTPException(status_code=404, detail=\"Library not found\")\n    if db_library.user_id != user.user_id:\n        raise HTTPException(status_code=401, detail=\"Could not validate credentials\")\n    book = Book.model_validate(book)\n    session.add(book)\n    session.commit()\n    session.refresh(book)\n    return {\"status\": 200, \"data\": book}\n\n@app.get(\"/books_search\", response_model=List[BookLibraries], tags=['book'])\ndef books_search(name: Optional[str] = None, author: Optional[str] = None, genre: Optional[str] = None,\n                condition: Optional[ConditionType]=None, session=Depends(get_session), user=Depends(auth_handler.get_current_user)) -&gt; List[Book]:\n    books = select(Book)\n    if name:\n        books = books.where(Book.book_name == name)\n    if author:\n        books = books.where(Book.book_author == author)\n    if condition:\n        books = books.where(Book.book_condition == condition)\n    if genre:\n        books = books.where(Book.genres.any(genre_name=genre))\n    return session.exec(books).all()\n\n@app.get(\"/books_list\", response_model=List[BookLibraries], tags=['book'])\ndef books_list(session=Depends(get_session), user=Depends(auth_handler.get_current_user)) -&gt; List[Book]:\n    return session.exec(select(Book)).all()\n\n@app.get(\"/books_list/user/me\", response_model=List[BookLibraries], tags=['book'])\ndef books_list_user(session=Depends(get_session), user=Depends(auth_handler.get_current_user)) -&gt; List[Book]:\n    return session.exec(select(Book).select_from(join(Book,Library)).where(Library.user_id == user.user_id)).all()\n\n@app.get(\"/book/{id_book}\", response_model=BookLibraries, tags=['book'])\ndef book_get(id_book: int, session=Depends(get_session), user=Depends(auth_handler.get_current_user))-&gt; Book:\n    db_book = session.get(Book, id_book)\n    if not db_book:\n        raise HTTPException(status_code=404, detail=\"Book not found\")\n    return db_book\n\n@app.patch(\"/book{id_book}\", tags=['book'])\ndef book_update(id_book: int, book: BookDefault, session=Depends(get_session), user=Depends(auth_handler.get_current_user)) -&gt; BookDefault:\n    db_book = session.get(Book, id_book)\n    if not db_book:\n        raise HTTPException(status_code=404, detail=\"Book not found\")\n    if db_book.library.user_id != user.user_id:\n        raise HTTPException(status_code=401, detail=\"Could not validate credentials\")\n    book_data = book.model_dump(exclude_unset=True) \n    for key, value in book_data.items():\n        setattr(db_book, key, value)\n    session.add(db_book)\n    session.commit()\n    session.refresh(db_book)\n    return db_book\n\n@app.delete(\"/book/delete{id_book}\", tags=['book'])\ndef book_delete(id_book: int, session=Depends(get_session), user=Depends(auth_handler.get_current_user)):\n    db_book = session.get(Book, id_book)\n    if not db_book:\n        raise HTTPException(status_code=404, detail=\"Book not found\")\n    if db_book.library.user_id != user.user_id:\n        raise HTTPException(status_code=401, detail=\"Could not validate credentials\")\n    session.delete(db_book)\n    session.commit()\n    return {\"ok\": True}\n\n# API Library\n\n@app.get(\"/libraries_list\", response_model=List[LibraryOutput], tags=['library'])\ndef libraries_list(session=Depends(get_session), user=Depends(auth_handler.get_current_user)) -&gt; List[Library]:\n    return session.exec(select(Library)).all()\n\n@app.get(\"/libraries_list/user/me\", response_model=List[LibraryOutput], tags=['library'])\ndef libraries_list_user(session=Depends(get_session), user=Depends(auth_handler.get_current_user)) -&gt; List[Library]:\n    return session.exec(select(Library).where(Library.user_id == user.user_id)).all()\n\n@app.get(\"/library/{id_library}\", response_model=LibraryOutput, tags=['library'])\ndef library_get(id_library: int, session=Depends(get_session), user=Depends(auth_handler.get_current_user)) -&gt; Library:\n    db_library = session.get(Library, id_library)\n    if not db_library:\n        raise HTTPException(status_code=404, detail=\"Library not found\")\n    return db_library\n\n@app.post(\"/library\", tags=['library'])\ndef library_create(library: LibraryInput, session=Depends(get_session), user=Depends(auth_handler.get_current_user)) -&gt; TypedDict('Response', {\"status\": int, \"data\": Library}):\n    lib = LibraryDefault(library_name=library.library_name, user_id=user.user_id)\n    library = Library.model_validate(lib)\n    session.add(library)\n    session.commit()\n    session.refresh(library)\n    return {\"status\": 200, \"data\": library}\n\n@app.patch(\"/library{id_library}\", tags=['library'])\ndef library_update(id_library: int, library: LibraryDefault, session=Depends(get_session), user=Depends(auth_handler.get_current_user)) -&gt; LibraryDefault:\n    db_library = session.get(Library, id_library)\n    if not db_library:\n        raise HTTPException(status_code=404, detail=\"Library not found\")\n    if db_library.user_id != user.user_id:\n        raise HTTPException(status_code=401, detail=\"Could not validate credentials\")\n    library_data = library.model_dump(exclude_unset=True) \n    for key, value in library_data.items():\n        setattr(db_library, key, value)\n    session.add(db_library)\n    session.commit()\n    session.refresh(db_library)\n    return db_library\n\n@app.delete(\"/library/delete{id_library}\", tags=['library'])\ndef library_delete(id_library: int, session=Depends(get_session), user=Depends(auth_handler.get_current_user)):\n    db_library = session.get(Library, id_library)\n    if not db_library:\n        raise HTTPException(status_code=404, detail=\"Library not found\")\n    if db_library.user_id != user.user_id:\n        raise HTTPException(status_code=401, detail=\"Could not validate credentials\")\n    session.delete(db_library)\n    session.commit()\n    return {\"ok\": True}\n\n\n# API User\n\n@app.post('/registration', tags=['user'])\ndef register(user: UserInput, session=Depends(get_session)) -&gt; TypedDict('Response', {\"status\": int, \"data\": User}):\n    users = session.exec(select(User)).all()\n    if any(x.username == user.username for x in users):\n        raise HTTPException(status_code=400, detail='Username is taken')\n    hashed_pwd = auth_handler.get_password_hash(user.password)\n    u = UserPassword(username=user.username, password=hashed_pwd, email=user.email)\n    us = User.model_validate(u)\n    session.add(us)\n    session.commit()\n    session.refresh(us)\n    return {\"status\": 200, \"data\": us}\n\n@app.post('/login', tags=['user'])\ndef login(user: UserLogin, session=Depends(get_session)) -&gt; TypedDict('Response', {\"status\": int, \"token\": str}):\n    user_found = session.exec(select(User).where(User.username == user.username)).first()\n    if not user_found:\n        raise HTTPException(status_code=401, detail='Invalid username and/or password')\n    verified = auth_handler.verify_password(user.password, user_found.password)\n    if not verified:\n        raise HTTPException(status_code=401, detail='Invalid username and/or password')\n    token = auth_handler.encode_token(user_found.username)\n    return {\"status\": 200, \"token\": token}\n\n@app.get('/users/me', tags=['user'])\ndef get_current_user(user: User = Depends(auth_handler.get_current_user), session=Depends(get_session)) -&gt; User:\n    return user\n\n@app.get('/users_list', response_model=List[UserOutput], tags=['user'])\ndef users_list(user: User = Depends(auth_handler.get_current_user), session=Depends(get_session)) -&gt; List[User]:\n    return session.exec(select(User)).all()\n\n@app.patch(\"/change_password\", tags=['user'])\ndef change_password(password_new: str, user: User = Depends(auth_handler.get_current_user), session=Depends(get_session)) -&gt; User:\n    hashed_pwd = auth_handler.get_password_hash(password_new)\n    setattr(user, 'password', hashed_pwd)\n    session.add(user)\n    session.commit()\n    session.refresh(user)\n    return user\n\n# API Request\n\n@app.get(\"/requests_list\", tags=['request'])\ndef requests_list(session=Depends(get_session), user=Depends(auth_handler.get_current_user)) -&gt; List[Request]:\n    return session.exec(select(Request)).all()\n\n@app.get(\"/requests_to_me\", tags=['request'])\ndef requests_list_to_me(session=Depends(get_session), user=Depends(auth_handler.get_current_user)) -&gt; List[Request]:\n    return session.exec(select(Request).select_from(join(Request,select(Book).select_from(join(Book,Library)).where(Library.user_id == user.user_id)))).all()\n\n@app.get(\"/requests_from_me\", tags=['request'])\ndef requests_list_from_me(session=Depends(get_session), user=Depends(auth_handler.get_current_user)) -&gt; List[Request]:\n    return session.exec(select(Request).where(Request.user_id == user.user_id)).all()\n\n@app.post(\"/request\", tags=['request'])\ndef request_create(request: RequestDefault, session=Depends(get_session), user=Depends(auth_handler.get_current_user)) -&gt; TypedDict('Response', {\"status\": int, \"data\": Request}):\n    request = Request.model_validate(request)\n    session.add(request)\n    session.commit()\n    session.refresh(request)\n    return {\"status\": 200, \"data\": request}\n\n@app.patch(\"/request{id_request}\", tags=['request'])\ndef request_update(id_request: int, request: RequestStatus, session=Depends(get_session), user=Depends(auth_handler.get_current_user)) -&gt; RequestStatus:\n    db_request = session.get(Request, id_request)\n    if not db_request:\n        raise HTTPException(status_code=404, detail=\"Request not found\")\n    db_book = session.get(Book, db_request.book_id)\n    if db_book.library.user_id != user.user_id:\n        raise HTTPException(status_code=401, detail=\"Could not validate credentials\")\n    request_data = request.model_dump(exclude_unset=True) \n    for key, value in request_data.items():\n        setattr(db_request, key, value)\n    session.add(db_request)\n    session.commit()\n    session.refresh(db_request)\n    return db_request\n\n@app.delete(\"/request/delete{id_request}\", tags=['request'])\ndef request_delete(id_request: int, session=Depends(get_session), user=Depends(auth_handler.get_current_user)):\n    db_request = session.get(Request, id_request)\n    if not db_request:\n        raise HTTPException(status_code=404, detail=\"Request not found\")\n    if db_request.user_id != user.user_id:\n        raise HTTPException(status_code=401, detail=\"Could not validate credentials\")\n    session.delete(db_request)\n    session.commit()\n    return {\"ok\": True}\n\n# API BookGenreLink\n\n@app.get(\"/book_genres_list\", tags=['book_genre'])\ndef book_genres_list(session=Depends(get_session), user=Depends(auth_handler.get_current_user)) -&gt; List[BookGenreLink]:\n    return session.exec(select(BookGenreLink)).all()\n\n@app.get(\"/book_genre_search\", tags=['book_genre'])\ndef book_genre_search(genre_id: Optional[int] = None, book_genre_degree: Optional[DegreeType] = None, \n                    session=Depends(get_session), user=Depends(auth_handler.get_current_user)) -&gt; List[BookGenreLink]:\n    book_genre_links = select(BookGenreLink)\n    if genre_id:\n        book_genre_links = book_genre_links.where(BookGenreLink.genre_id == genre_id)\n    if book_genre_degree:\n        book_genre_links = book_genre_links.where(BookGenreLink.book_genre_degree == book_genre_degree)\n    return session.exec(book_genre_links).all()\n\n@app.post(\"/book_genre\", tags=['book_genre'])\ndef book_genre_create(book_genre: BookGenreLinkDefault, session=Depends(get_session), user=Depends(auth_handler.get_current_user)) -&gt; TypedDict('Response', {\"status\": int, \"data\": BookGenreLink}):\n    db_genre = session.get(Genre, book_genre.genre_id)\n    db_book = session.get(Book, book_genre.book_id)\n    if not db_genre:\n        raise HTTPException(status_code=404, detail=\"Genre not found\")\n    if not db_book:\n        raise HTTPException(status_code=404, detail=\"Book not found\")\n    if db_book.library.user_id != user.user_id:\n        raise HTTPException(status_code=401, detail=\"Could not validate credentials\")\n    book_genre = BookGenreLink.model_validate(book_genre)\n    session.add(book_genre)\n    session.commit()\n    session.refresh(book_genre)\n    return {\"status\": 200, \"data\": book_genre}\n\n@app.patch(\"/book_genre/{id_book_genre}\", tags=['book_genre'])\ndef book_genre_update(id_book_genre: int, book_genre: BookGenreLinkDefault, session=Depends(get_session), user=Depends(auth_handler.get_current_user)) -&gt; BookGenreLinkDefault:\n    db_book_genre = session.get(BookGenreLink, id_book_genre)\n    if not db_book_genre:\n        raise HTTPException(status_code=404, detail=\"BookGenreLink not found\")\n    db_book = session.get(Book, db_book_genre.book_id)\n    if db_book.library.user_id != user.user_id:\n        raise HTTPException(status_code=401, detail=\"Could not validate credentials\")\n    book_genre_data = book_genre.model_dump(exclude_unset=True) \n    for key, value in book_genre_data.items():\n        setattr(db_book_genre, key, value)\n    session.add(db_book_genre)\n    session.commit()\n    session.refresh(db_book_genre)\n    return db_book_genre\n\n@app.delete(\"/book_genre/delete{id_book_genre}\", tags=['book_genre'])\ndef book_genre_delete(id_book_genre: int, session=Depends(get_session), user=Depends(auth_handler.get_current_user)):\n    db_book_genre = session.get(BookGenreLink, id_book_genre)\n    if not db_book_genre:\n        raise HTTPException(status_code=404, detail=\"BookGenreLink not found\")\n    db_book = session.get(Book, db_book_genre.book_id)\n    if db_book.library.user_id != user.user_id:\n        raise HTTPException(status_code=401, detail=\"Could not validate credentials\")\n    session.delete(db_book_genre)\n    session.commit()\n    return {\"ok\": True}\n\n# API Genre\n\n@app.get(\"/genres_list\", response_model=List[GenreBooks], tags=['genre'])\ndef genres_list(session=Depends(get_session), user=Depends(auth_handler.get_current_user)) -&gt; List[Genre]:\n    return session.exec(select(Genre)).all()\n\n@app.post(\"/genre\", tags=['genre'])\ndef genre_create(genre: GenreDefault, session=Depends(get_session), user=Depends(auth_handler.get_current_user)) -&gt; TypedDict('Response', {\"status\": int, \"data\": Genre}):\n    genre = Genre.model_validate(genre)\n    session.add(genre)\n    session.commit()\n    session.refresh(genre)\n    return {\"status\": 200, \"data\": genre}\n</code></pre>"},{"location":"lab1/models_for_lab1/","title":"\u041c\u043e\u0434\u0435\u043b\u0438","text":""},{"location":"lab1/models_for_lab1/#erd","title":"ERD","text":""},{"location":"lab1/models_for_lab1/#modelspy","title":"<code>models.py</code>","text":"<pre><code>from enum import Enum\nfrom datetime import datetime\nfrom typing import Optional, List\n\nfrom pydantic import validator, EmailStr\nfrom sqlmodel import SQLModel, Field, Relationship\n\n\nclass ConditionType(str, Enum):\n    excellent = \"excellent\"\n    good = \"good\"\n    used = \"used\"\n\nclass RequestStatusType(Enum):\n    waiting = \"waiting\"\n    approved = \"approved\"\n    rejected = \"rejected\"\n\nclass DegreeType(Enum):\n    low = \"low\"\n    medium = \"medium\"\n    high = \"high\"\n\n\n\n\nclass RequestDefault(SQLModel):\n    user_id: Optional[int] = Field(default=None, foreign_key=\"user.user_id\")\n    book_id: Optional[int] = Field(default=None, foreign_key=\"book.book_id\")\n\nclass RequestStatus(RequestDefault):\n    request_status: RequestStatusType = \"waiting\"\n\nclass Request(RequestStatus, table=True):\n    request_id: Optional[int] = Field(default=None, primary_key=True)\n    request_date: datetime = datetime.now()\n\n\nclass UserInput(SQLModel):\n    username: str\n    password: str = Field(max_length=256, min_length=6)\n    password2: str\n    email: EmailStr\n\n    @validator('password2')\n    def password_match(cls, v, values, **kwargs):\n        if 'password' in values and v != values['password']:\n            raise ValueError('passwords do not match')\n        return v\n\nclass UserDefault(SQLModel):\n    username: str = Field(index=True)\n    email: EmailStr\n\nclass UserPassword(UserDefault):\n    password: str = Field(max_length=256, min_length=6)\n\nclass User(UserPassword, table=True):\n    user_id: Optional[int] = Field(default=None, primary_key=True)\n    created_at: datetime = datetime.now()\n    libraries: Optional[List[\"Library\"]] = Relationship(back_populates=\"user\", cascade_delete=True)\n    books: Optional[List[\"Book\"]] = Relationship(back_populates=\"users\", link_model=Request)\n\nclass UserLogin(SQLModel):\n    username: str\n    password: str\n\nclass UserOutput(UserDefault):\n    libraries: Optional[List[\"LibraryOutput\"]] = None\n\n\n\nclass LibraryInput(SQLModel):\n    library_name: str\n\nclass LibraryDefault(SQLModel):\n    library_name: str\n    user_id: Optional[int] = Field(default=None, foreign_key=\"user.user_id\", ondelete=\"CASCADE\")\n\nclass Library(LibraryDefault, table=True):\n    library_id: Optional[int] = Field(default=None, primary_key=True)\n    user: User = Relationship(back_populates=\"libraries\")\n    books: Optional[List[\"Book\"]] = Relationship(back_populates=\"library\", cascade_delete=True) \n\nclass LibraryOutput(LibraryDefault):\n    library_id: int\n    user_id: int\n    books: Optional[List[\"Book\"]] = None\n\n\n\nclass BookGenreLinkDefault(SQLModel):\n    genre_id: Optional[int] = Field(default=None, foreign_key=\"genre.genre_id\")\n    book_id: Optional[int] = Field(default=None, foreign_key=\"book.book_id\")\n    book_genre_degree: DegreeType\n\nclass BookGenreLink(BookGenreLinkDefault, table=True):\n    book_genre_id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass GenreDefault(SQLModel):\n    genre_name: str\n\nclass Genre(GenreDefault, table=True):\n    genre_id: Optional[int] = Field(default=None, primary_key=True)\n    books: Optional[List[\"Book\"]] = Relationship(back_populates=\"genres\", link_model=BookGenreLink)\n\nclass GenreBooks(GenreDefault):\n    genre_id: int\n    books: Optional[List[\"Book\"]] = None\n\n\n\nclass BookDefault(SQLModel):\n    book_name: str\n    book_author: str\n    book_condition: ConditionType\n    library_id: Optional[int] = Field(default=None, foreign_key=\"library.library_id\", ondelete=\"CASCADE\")\n\nclass Book(BookDefault, table=True):\n    book_id: Optional[int] = Field(default=None, primary_key=True)\n    library: Library = Relationship(back_populates=\"books\")\n    users: Optional[List[User]] = Relationship(back_populates=\"books\", link_model=Request)\n    genres: Optional[List[Genre]] = Relationship(back_populates=\"books\", link_model=BookGenreLink)\n\nclass BookLibraries(BookDefault):\n    book_id: int\n    library: LibraryOutput\n    users: Optional[List[User]] = None\n    genres: Optional[List[Genre]] = None\n</code></pre>"},{"location":"lab1/practice_for_lab1/","title":"\u0421\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 \u043f\u043e \u041b\u0420 1","text":"<p>\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 1</p> <p>\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 2</p> <p>\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 3</p>"},{"location":"lab1/task_for_lab1/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f FastAPI","text":""},{"location":"lab1/task_for_lab1/#_1","title":"\u0422\u0435\u043c\u0430","text":"<p>\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0431\u0443\u043a\u043a\u0440\u043e\u0441\u0441\u0438\u043d\u0433\u0430</p> <p>\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u043e\u0431\u043c\u0435\u043d\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u043a\u043d\u0438\u0433\u0430\u043c\u0438 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439. \u042d\u0442\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0431\u043b\u0435\u0433\u0447\u0430\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043e\u0431\u043c\u0435\u043d\u0430 \u043a\u043d\u0438\u0433\u0430\u043c\u0438, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c \u043a\u043d\u0438\u0433\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u043c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u044b, \u0438 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0434\u043b\u044f \u043e\u0431\u043c\u0435\u043d\u0430 \u043a\u043d\u0438\u0433\u0430\u043c\u0438. </p>"},{"location":"lab1/task_for_lab1/#-","title":"\u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f","text":"<ul> <li> <p>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0444\u0438\u043b\u0435\u0439: \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0444\u0438\u043b\u0438, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0435\u0431\u0435.</p> </li> <li> <p>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043d\u0438\u0433 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443: \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043c\u043e\u0433\u0443\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043a\u043d\u0438\u0433\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043e\u043d\u0438 \u0433\u043e\u0442\u043e\u0432\u044b \u043f\u043e\u0434\u0435\u043b\u0438\u0442\u044c\u0441\u044f, \u0432 \u0441\u0432\u043e\u044e \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u0443\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u043d\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435.</p> </li> <li> <p>\u041f\u043e\u0438\u0441\u043a \u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u043e\u0431\u043c\u0435\u043d: \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043f\u043e\u0438\u0441\u043a\u0430 \u043a\u043d\u0438\u0433 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u043e\u0431\u043c\u0435\u043d \u043a\u043d\u0438\u0433\u0430\u043c\u0438 \u0434\u0440\u0443\u0433\u0438\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c.</p> </li> <li> <p>\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438 \u0438 \u043e\u0431\u043c\u0435\u043d\u0430\u043c\u0438: \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438 \u043d\u0430 \u043e\u0431\u043c\u0435\u043d, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043d\u0430 \u043e\u0431\u043c\u0435\u043d.</p> </li> </ul>"},{"location":"lab1/task_for_lab1/#_2","title":"\u041a\u0440\u0438\u0442\u0435\u0440\u0438\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<ul> <li> <p>5 \u0438\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u0442\u0430\u0431\u043b\u0438\u0446</p> </li> <li> <p>\u0421\u0432\u044f\u0437\u0438 many-to-many \u0438 one-to-many</p> </li> <li> <p>\u0410\u0441\u0441\u043e\u0446\u0438\u0430\u0442\u0438\u0432\u043d\u0430\u044f \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c \u0434\u043e\u043b\u0436\u043d\u0430 \u0438\u043c\u0435\u0442\u044c \u043f\u043e\u043b\u0435, \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u044e\u0449\u0435\u0435 \u0441\u0432\u044f\u0437\u044c, \u043f\u043e\u043c\u0438\u043c\u043e \u0441\u0441\u044b\u043b\u043e\u043a \u043d\u0430 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b</p> </li> </ul>"},{"location":"lab1/task_for_lab1/#fastapi","title":"\u042d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0430 FastAPI","text":"<ul> <li> <p>\u0422\u0430\u0431\u043b\u0438\u0446\u044b, \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e ORM SQLAlchemy \u0438\u043b\u0438 SQLModel \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0411\u0414 PostgreSQL.</p> </li> <li> <p>API, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 CRUD-\u044b. \u0422\u0430\u043c \u0433\u0434\u0435 \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e, \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c GET-\u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u043c\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438 (\u0441\u0432\u044f\u0437\u0438 many-to-many \u0438 one-to-many).</p> </li> <li> <p>\u041d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Alembic.</p> </li> <li> <p>\u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044e \u0442\u0438\u043f\u043e\u0432 \u0432 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u0445 \u0432 API-\u043c\u0435\u0442\u043e\u0434\u0430\u0445.</p> </li> <li> <p>\u041e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u043d\u0443\u044e \u0444\u0430\u0439\u043b\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0441 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435\u043c \u043a\u043e\u0434\u0430, \u043e\u0442\u0432\u0435\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0437\u0430 \u0440\u0430\u0437\u043d\u0443\u044e \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0443 \u0438 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043d\u0443\u044e \u043e\u0431\u043b\u0430\u0441\u0442\u044c, \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0438 \u043f\u0430\u043f\u043a\u0438.</p> </li> </ul>"},{"location":"lab1/task_for_lab1/#_3","title":"\u042d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f","text":"<ul> <li> <p>\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f</p> </li> <li> <p>\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f JWT-\u0442\u043e\u043a\u0435\u043d\u043e\u0432</p> </li> <li> <p>\u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u043e JWT-\u0442\u043e\u043a\u0435\u043d\u0443</p> </li> <li> <p>\u0425\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u0435\u0439</p> </li> <li> <p>\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0410\u041f\u0418-\u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435, \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u0441\u043c\u0435\u043d\u0435 \u043f\u0430\u0440\u043e\u043b\u044f</p> </li> </ul>"},{"location":"lab2/lab2/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2. \u041f\u043e\u0442\u043e\u043a\u0438. \u041f\u0440\u043e\u0446\u0435\u0441\u0441\u044b. \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c.","text":""},{"location":"lab2/lab2/#_1","title":"\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b","text":"<p>\u041f\u043e\u043d\u044f\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438 \u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438, \u043f\u043e\u043d\u044f\u0442\u044c, \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0430\u0441\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0432 Python.</p>"},{"location":"lab2/task1/","title":"\u0417\u0430\u0434\u0430\u0447\u0430 1. \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python","text":"<p>\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.</p>"},{"location":"lab2/task1/#_1","title":"\u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f:","text":"<ol> <li> <p>\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430: threading, multiprocessing \u0438 async.</p> </li> <li> <p>\u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e calculate_sum(), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f.</p> </li> <li> <p>\u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c asyncio.</p> </li> <li> <p>\u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0438\u0445 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e.</p> </li> <li> <p>\u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b.</p> </li> </ol>"},{"location":"lab2/task1/#threading","title":"threading","text":"<pre><code>import threading\nimport time\n\ncounter = 0\nlock = threading.Lock()\n\ndef calculate_sum(beg, end):\n    global counter\n    for i in range(beg, end):\n        lock.acquire()\n        counter += i\n        lock.release()\n\n\ndef main(num):\n    global counter\n    threads = []\n    beg = 1\n    step = int(1000000 / num)\n    for i in range(num):\n        end = beg + step\n        threads.append(threading.Thread(target=calculate_sum, args=(beg, end, )))\n        beg = end\n    start = time.time()\n    for thread in threads:\n        thread.start()\n    for thread in threads:\n        thread.join()\n    finish = time.time() - start\n    print(f'Counter value: {counter}; time: {round(finish, 4)}; number of threads: {num}')\n    counter = 0\n\n\nif __name__ == '__main__':\n    thread_nums = [2, 4, 8, 10, 25]\n    for thr in thread_nums:\n      main(thr)\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b:</p> <p></p>"},{"location":"lab2/task1/#multiprocessing","title":"multiprocessing","text":"<p>\u0414\u043b\u044f \u043c\u0435\u0436\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u043e\u0433\u043e \u043e\u0431\u043c\u0435\u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u0438, \u0442\u0430\u043a \u043a\u0430\u043a \u044d\u0442\u043e\u0442 \u0432\u0438\u0434 \u043e\u0431\u043c\u0435\u043d\u0430 \u0431\u043e\u043b\u0435\u0435 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u0439.</p> <pre><code>from multiprocessing import Process, Queue\nimport time\n\n\ndef calculate_sum(beg, end, q):\n    counter = 0\n    for i in range(beg, end):\n        counter += i\n    q.put(counter)\n\n\ndef main(num):\n    q = Queue()\n    processes = []\n    beg = 1\n    step = int(1000000 / num)\n    for i in range(num):\n        end = beg + step\n        processes.append(Process(target=calculate_sum, args=(beg, end, q,)))\n        beg = end\n    start = time.time()\n    for p in processes:\n        p.start()\n    for p in processes:\n        p.join()\n    finish = time.time() - start\n    answer = 0\n    while not q.empty():\n        answer += q.get()\n    print(f'Counter value: {answer}; time: {round(finish, 4)}; number of processes: {num}')\n\nif __name__ == '__main__':\n    process_nums = [2, 4, 8, 10, 25]\n    for process_num in process_nums:\n      main(process_num)\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b:</p> <p></p>"},{"location":"lab2/task1/#async","title":"async","text":"<pre><code>import asyncio\nimport time\n\n\nasync def calculate_sum(beg, end):\n    counter = 0\n    for i in range(beg, end):\n        counter += i\n    return counter\n\n\nasync def main(num):\n    beg = 1\n    step = int(1000000 / num)\n    calculate_tasks = []\n    start = time.time()\n    for i in range(num):\n        end = beg + step\n        beg_new = beg\n        beg = end\n        calculate_task = asyncio.create_task(calculate_sum(beg_new, end))\n        calculate_tasks.append(calculate_task)\n    answers = await asyncio.gather(*calculate_tasks)\n    finish = time.time() - start\n    print(f'Counter value: {sum(answers)}; time: {round(finish, 4)}; number of tasks: {num}')\n\nif __name__ == '__main__':\n    task_nums = [2, 4, 8, 10, 25]\n    for task_num in task_nums:\n        asyncio.run(main(task_num))\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b:</p> <p></p>"},{"location":"lab2/task1/#_2","title":"\u0412\u044b\u0432\u043e\u0434\u044b","text":"<ul> <li> <p>Multiprocessing \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b, \u0447\u0435\u043c threading \u043f\u0440\u0438 2-8 \u043f\u043e\u0442\u043e\u043a\u0430\u0445/\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u0445, \u0442.\u043a. \u0437\u0430\u0434\u0430\u0447\u0430 \u0441\u0432\u044f\u0437\u0430\u043d\u0430 \u0441 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f\u043c\u0438. \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u0430\u044f \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0430 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430 \u043d\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c \u043f\u043e\u0442\u043e\u043a\u0430\u043c. </p> </li> <li> <p>\u0423\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u0437\u0430\u043c\u0435\u0434\u043b\u0435\u043d\u0438\u044e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u0432\u044f\u0437\u0430\u043d\u043e \u0441 \u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 (\u0432 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u043f\u043e\u0442\u043e\u043a\u0430) \u0438 \u043d\u0435\u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0441\u0430\u043c\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.</p> </li> <li> <p>\u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u043e \u043b\u0443\u0447\u0448\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u043e\u0434\u043d\u0430\u043a\u043e \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u043d\u0430 \u0432\u0441\u0435 \u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447 \u043d\u0435 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u0431\u043e\u043b\u0435\u0435 \u0431\u044b\u0441\u0442\u0440\u043e\u043c\u0443 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044e \u0437\u0430\u0434\u0430\u0447\u0438. \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u0432\u044f\u0437\u0430\u043d\u043e \u0441 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e \u0437\u0430\u0434\u0430\u0447\u0438 (\u0443\u0437\u043a\u043e\u0435 \u043c\u0435\u0441\u0442\u043e \u0432 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430, \u0430 \u043d\u0435 \u0432 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u0438 \u043e\u0442\u0432\u0435\u0442\u0430).</p> </li> </ul>"},{"location":"lab2/task2/","title":"\u0417\u0430\u0434\u0430\u0447\u0430 2. \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.</p>"},{"location":"lab2/task2/#_1","title":"\u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f:","text":"<ol> <li> <p>\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async.</p> </li> <li> <p>\u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e parse_and_save(url), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 URL, \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0435\u0435, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d.</p> </li> <li> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u0435\u043d\u043d\u0438\u044f \u0435\u0435 \u0434\u0430\u043d\u043d\u044b\u043c\u0438.</p> </li> <li> <p>\u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c aiohttp \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.</p> </li> <li> <p>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u0440\u0430\u0432\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430.</p> </li> <li> <p>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.</p> </li> <li> <p>\u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b.</p> </li> </ol>"},{"location":"lab2/task2/#postgresql","title":"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 PostgreSQL","text":"<p>\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0431\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0444\u0430\u0439\u043b <code>database.ini</code> \u043f\u043e \u0448\u0430\u0431\u043b\u043e\u043d\u0443:</p> <pre><code>[postgresql]\nhost=localhost\ndatabase=DatabaseName\nuser=YourUsername\npassword=YourPassword\n</code></pre> <p>\u0417\u0430\u0442\u0435\u043c \u0431\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d \u0444\u0430\u0439\u043b <code>config.py</code> \u0441 \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 <code>load_config()</code>, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0447\u0438\u0442\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0438\u0437 <code>database.ini</code>:</p> <pre><code>from configparser import ConfigParser\n\ndef load_config(filename='database.ini', section='postgresql'):\n    parser = ConfigParser()\n    parser.read(filename)\n\n    # get section, default to postgresql\n    config = {}\n    if parser.has_section(section):\n        params = parser.items(section)\n        for param in params:\n            config[param[0]] = param[1]\n    else:\n        raise Exception('Section {0} not found in the {1} file'.format(section, filename))\n\n    return config\n\nif __name__ == '__main__':\n    config = load_config()\n    print(config)\n</code></pre> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f <code>database.ini</code>, \u043c\u043e\u0436\u043d\u043e \u0441\u043a\u0440\u044b\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0435 \u0432 \u0411\u0414, \u0443\u0431\u0438\u0440\u0430\u044f \u0435\u0435 \u0438\u0437 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0430.</p>"},{"location":"lab2/task2/#_2","title":"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0432 \u0411\u0414","text":"<pre><code>import psycopg2\nfrom config import load_config\nimport bcrypt\nfrom datetime import datetime\n\ndef hash_password(password):\n    pwd_bytes = password.encode('utf-8')\n    salt = bcrypt.gensalt()\n    hashed_pwd = bcrypt.hashpw(password=pwd_bytes, salt=salt)\n    return hashed_pwd.decode('utf-8')\n\ndef insert_data(new_data):\n    config = load_config()\n    for entry in new_data:\n        print(f'{entry} is processing')\n        new_username, new_email, new_password, new_library_name, new_book_name, new_book_author, new_book_condition = entry\n        pass_hashed = hash_password(new_password)\n        sql_user = f\"\"\"INSERT INTO public.\"user\" (username, email, password, created_at)\n                    VALUES ('{new_username}', '{new_email}', '{pass_hashed}', '{datetime.now()}') RETURNING user_id;\"\"\"\n        try:\n            with  psycopg2.connect(**config) as conn:\n                with  conn.cursor() as cur:\n                    cur.execute(sql_user) \n                    # get the generated id back\n                    rows = cur.fetchone() \n                    if rows:\n                        new_user_id = rows[0]\n                    print('Added new row to User table')\n\n                    sql_lib = f\"\"\"INSERT INTO public.library (user_id, library_name) \n                    VALUES ('{new_user_id}', '{new_library_name}') RETURNING library_id;\"\"\"\n                    cur.execute(sql_lib)\n                    rows = cur.fetchone()\n                    if rows:\n                        new_library_id = rows[0]\n                    print('Added new row to Library table')\n\n                    sql_book = f\"\"\"INSERT INTO public.book (book_name, book_author, book_condition, library_id) \n                    VALUES ('{new_book_name}', '{new_book_author}', '{new_book_condition}', '{new_library_id}') RETURNING book_id;\"\"\"\n                    cur.execute(sql_book)\n                    print('Added new row to Book table')\n                    conn.commit() # commit the changes to the database\n        except (Exception, psycopg2.DatabaseError) as error:\n            print(error)\n\n\nif __name__ == '__main__':\n    data = [\n        ('user9', 'user9@example.com', 'password9', 'library9', 'book3', 'author3', 'excellent'),\n        ('user8', 'user8@example.com', 'password8', 'library8', 'book2', 'author2', 'excellent')\n    ]\n    insert_data(data)\n</code></pre>"},{"location":"lab2/task2/#threading","title":"threading","text":"<pre><code>import requests\nfrom bs4 import BeautifulSoup\nimport time\nimport secrets\nimport string\nimport random\nimport threading\n\nfrom db_insert import insert_data\n\ndef get_condition():\n    conditions = ['excellent', 'good', 'used']\n    return random.choice(conditions)\n\ndef gen_password(n):\n    alphabet = string.ascii_letters + string.digits\n    password = ''.join(secrets.choice(alphabet) for i in range(n))\n    return password\n\ndef parse_and_save(urls):\n    for url in urls:\n        response = requests.get(url)\n        response.raise_for_status()\n        soup = BeautifulSoup(response.text, 'lxml')\n\n        new_username = soup.find('div', class_='info').find('h2').text\n        new_email = f'{gen_password(5)}@example.com'\n        new_password = gen_password(10)\n        new_library_name = soup.find('span', class_='current book-rating-title').text\n        new_book_name = soup.find('a', class_='title-link d-inline-block').text\n        new_book_author = soup.find('a', class_='text-dark link').text\n        new_book_condition = get_condition()\n\n        data = []   # data = [('user7', 'user7@example.com', 'password7', 'library7', 'book1', 'author1', 'excellent')]\n        entry = new_username, new_email, new_password, new_library_name, new_book_name, new_book_author, new_book_condition\n        data.append(entry)\n        insert_data(data)\n\ndef main(num):\n    urls = [\n        'https://readrate.com/rus/ratings/chto-chitaet-pink',\n        'https://readrate.com/rus/ratings/lili-kollinz-knigi-na-polke-aktrisy',\n        'https://readrate.com/rus/ratings/kakie-knigi-chitaet-emi-shumer',\n        'https://readrate.com/rus/ratings/silvestr-stallone-lyubimye-knigi-zvezdy-boevikov',\n        'https://readrate.com/rus/ratings/kventin-tarantino-lyubimye-knigi-metra-kino',\n        'https://readrate.com/rus/ratings/tom-kruz-filmy-po-knigam-s-ego-uchastiem'\n        ]\n    beg = 0\n    step = int(len(urls) / num)\n    threads = []\n    for _ in range(num):\n        end = beg + step\n        threads.append(threading.Thread(target=parse_and_save, args=(urls[beg:end], )))\n        beg = end\n    start = time.time()\n    for thread in threads:\n        thread.start()\n    for thread in threads:\n        thread.join()\n    finish = time.time() - start\n    print(f'Time: {round(finish, 4)}; number of threads: {num}')\n\n\nif __name__ == '__main__':\n    main(3)\n</code></pre>"},{"location":"lab2/task2/#multiprocessing","title":"multiprocessing","text":"<pre><code>import requests\nfrom bs4 import BeautifulSoup\nimport time\nimport secrets\nimport string\nimport random\nfrom multiprocessing import Process\n\nfrom db_insert import insert_data\n\ndef get_condition():\n    conditions = ['excellent', 'good', 'used']\n    return random.choice(conditions)\n\ndef gen_password(n):\n    alphabet = string.ascii_letters + string.digits\n    password = ''.join(secrets.choice(alphabet) for i in range(n))\n    return password\n\ndef parse_and_save(urls):\n    for url in urls:\n        response = requests.get(url)\n        response.raise_for_status()\n        soup = BeautifulSoup(response.text, 'lxml')\n\n        new_username = soup.find('div', class_='info').find('h2').text\n        new_email = f'{gen_password(5)}@example.com'\n        new_password = gen_password(10)\n        new_library_name = soup.find('span', class_='current book-rating-title').text\n        new_book_name = soup.find('a', class_='title-link d-inline-block').text\n        new_book_author = soup.find('a', class_='text-dark link').text\n        new_book_condition = get_condition()\n\n        data = []   # data = [('user7', 'user7@example.com', 'password7', 'library7', 'book1', 'author1', 'excellent')]\n        entry = new_username, new_email, new_password, new_library_name, new_book_name, new_book_author, new_book_condition\n        data.append(entry)\n        insert_data(data)\n\ndef main(num):\n    urls = [\n        'https://readrate.com/rus/ratings/chto-chitaet-pink',\n        'https://readrate.com/rus/ratings/lili-kollinz-knigi-na-polke-aktrisy',\n        'https://readrate.com/rus/ratings/kakie-knigi-chitaet-emi-shumer',\n        'https://readrate.com/rus/ratings/silvestr-stallone-lyubimye-knigi-zvezdy-boevikov',\n        'https://readrate.com/rus/ratings/kventin-tarantino-lyubimye-knigi-metra-kino',\n        'https://readrate.com/rus/ratings/tom-kruz-filmy-po-knigam-s-ego-uchastiem'\n        ]\n    beg = 0\n    step = int(len(urls) / num)\n    processes = []\n    for _ in range(num):\n        end = beg + step\n        processes.append(Process(target=parse_and_save, args=(urls[beg:end], )))\n        beg = end\n    start = time.time()\n    for p in processes:\n        p.start()\n    for p in processes:\n        p.join()\n    finish = time.time() - start\n    print(f'Time: {round(finish, 4)}; number of processes: {num}')\n\n\nif __name__ == '__main__':\n    main(3)\n</code></pre>"},{"location":"lab2/task2/#async","title":"async","text":"<pre><code>from bs4 import BeautifulSoup\nimport time\nimport secrets\nimport string\nimport random\nimport asyncio\nimport aiohttp as aiohttp\n\nfrom db_insert import insert_data\n\ndef get_condition():\n    conditions = ['excellent', 'good', 'used']\n    return random.choice(conditions)\n\ndef gen_password(n):\n    alphabet = string.ascii_letters + string.digits\n    password = ''.join(secrets.choice(alphabet) for i in range(n))\n    return password\n\nasync def parse_and_save(urls):\n    for url in urls:\n        async with aiohttp.ClientSession() as session:\n            async with session.get(url) as response:\n                html = await response.text()\n                soup = BeautifulSoup(html, 'lxml')\n\n                new_username = soup.find('div', class_='info').find('h2').text\n                new_email = f'{gen_password(5)}@example.com'\n                new_password = gen_password(10)\n                new_library_name = soup.find('span', class_='current book-rating-title').text\n                new_book_name = soup.find('a', class_='title-link d-inline-block').text\n                new_book_author = soup.find('a', class_='text-dark link').text\n                new_book_condition = get_condition()\n\n                data = []   # data = [('user7', 'user7@example.com', 'password7', 'library7', 'book1', 'author1', 'excellent')]\n                entry = new_username, new_email, new_password, new_library_name, new_book_name, new_book_author, new_book_condition\n                data.append(entry)\n                insert_data(data)\n\nasync def main(num):\n    urls = [\n        'https://readrate.com/rus/ratings/chto-chitaet-pink',\n        'https://readrate.com/rus/ratings/lili-kollinz-knigi-na-polke-aktrisy',\n        'https://readrate.com/rus/ratings/kakie-knigi-chitaet-emi-shumer',\n        'https://readrate.com/rus/ratings/silvestr-stallone-lyubimye-knigi-zvezdy-boevikov',\n        'https://readrate.com/rus/ratings/kventin-tarantino-lyubimye-knigi-metra-kino',\n        'https://readrate.com/rus/ratings/tom-kruz-filmy-po-knigam-s-ego-uchastiem'\n        ]\n    beg = 0\n    step = int(len(urls) / num)\n    tasks = []\n    start = time.time()\n    for _ in range(num):\n        end = beg + step\n        beg_new = beg\n        beg = end\n        task = asyncio.create_task(parse_and_save(urls[beg_new:end]))\n        tasks.append(task)\n    await asyncio.gather(*tasks)\n    finish = time.time() - start\n    print(f'Time: {round(finish, 4)}; number of tasks: {num}')\n\n\nif __name__ == '__main__':\n    asyncio.run(main(3))\n</code></pre>"},{"location":"lab2/task2/#_3","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b","text":"\u041f\u043e\u0434\u0445\u043e\u0434 \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b Threading (3 \u043f\u043e\u0442\u043e\u043a\u0430) 1.869 Multiprocessing (3 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430) 2.2034 Async (3 \u0437\u0430\u0434\u0430\u0447\u0438) 2.9526 <p>\u041b\u0443\u0447\u0448\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438, \u0442.\u043a. \u044d\u0442\u043e\u0442 \u043f\u043e\u0434\u0445\u043e\u0434 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u0435\u043d \u0434\u043b\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430.</p>"},{"location":"lab3/lab3/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3. \u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0432 Docker, \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u0438.","text":""},{"location":"lab3/lab3/#_1","title":"\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b","text":"<p>\u041d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u044b\u0432\u0430\u0442\u044c FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 Docker, \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0447\u0435\u0440\u0435\u0437 API \u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.</p>"},{"location":"lab3/task1/","title":"\u0417\u0430\u0434\u0430\u0447\u0430 1. \u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 Docker","text":""},{"location":"lab3/task1/#1-fastapi","title":"1. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f","text":"<p>\u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1.</p>"},{"location":"lab3/task1/#2","title":"2. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1.</p>"},{"location":"lab3/task1/#3","title":"3. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 2.</p>"},{"location":"lab3/task1/#4-http","title":"4. \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u043f\u043e http","text":"<p>\u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0431\u044b\u043b\u043e \u0441\u0434\u0435\u043b\u0430\u043d\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 FastAPI \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430.</p> <p><code>main.py</code></p> <pre><code>from typing import List\nfrom fastapi import FastAPI, HTTPException\nfrom typing_extensions import TypedDict\n\nfrom .task2_threading import main\n\napp = FastAPI()\n\n@app.post(\"/parse\")\ndef parse(urls: List[str], num: int) -&gt; TypedDict('Response', {\"status\": int, \"message\": str}):\n    main(urls, num)\n    return {\"status\": 200, \"message\": \"Parsing completed\"}\n</code></pre>"},{"location":"lab3/task1/#5-dockerfile","title":"5. \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 Dockerfile","text":"<p>Dockerfile \u0434\u043b\u044f \u0434\u043b\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f:</p> <pre><code>FROM python:3.12.3-alpine3.19\n\nWORKDIR /src\n\nCOPY requirements.txt requirements.txt\n\nRUN apk update\nRUN apk add postgresql-dev gcc python3-dev musl-dev\nRUN pip install --no-cache-dir --upgrade -r requirements.txt\n\nCOPY ./app /src/app\n\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n</code></pre> <p>Dockerfile \u0434\u043b\u044f \u0434\u043b\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u043e\u043c:</p> <pre><code>FROM python:3.12.3-alpine3.19\n\nWORKDIR /src\n\nCOPY requirements.txt requirements.txt\n\nRUN apk update\nRUN apk add postgresql-dev gcc python3-dev musl-dev\nRUN pip install --no-cache-dir --upgrade -r requirements.txt\n\nCOPY ./parser /src/app\n\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8010\"]\n</code></pre>"},{"location":"lab3/task1/#6-docker-compose","title":"6. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 Docker Compose \u0444\u0430\u0439\u043b\u0430","text":"<p>\u0411\u044b\u043b \u043d\u0430\u043f\u0438\u0441\u0430\u043d \u0444\u0430\u0439\u043b <code>docker-compose.yml</code> \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u043c \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432, \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0438\u0445 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445.</p> <pre><code>version: '3.8'\n\nservices:\n  postgres:\n    image: postgres:latest\n    container_name: postgres\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: 1234\n      POSTGRES_DB: bookcross_db\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U postgres -d bookcross_db\"]\n      interval: 45s\n      timeout: 45s\n    ports:\n      - \"5433:5432\"\n\n  bookcrossing-app:\n    build: \n      context: ./app_bookcrossing\n    container_name: bookcrossing\n    ports:\n      - \"8001:8000\"\n    depends_on:\n      postgres:\n        condition: service_healthy\n\n  parser-app:\n    build: \n      context: ./app_parser\n    container_name: parser\n    ports:\n      - \"8020:8010\"\n    depends_on:\n      postgres:\n        condition: service_healthy\n</code></pre>"},{"location":"lab3/task2/","title":"\u0417\u0430\u0434\u0430\u0447\u0430 2. \u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI","text":"<p>\u0411\u044b\u043b \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0435\u043d\u0434\u043f\u043e\u0438\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441 URL \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u0443 (\u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u043e\u043c\u0443 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435) \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0443.</p> <pre><code>@app.post(\"/db_parse\", tags=['parser'])\ndef db_parse(urls: List[str], num: int) -&gt; TypedDict('Response', {\"status\": int, \"message\": str}):\n    params = {'num': f'{num}'}\n    response = requests.post('http://parser:8010/parse', params=params, json=urls)\n    return response.json()\n</code></pre>"},{"location":"lab3/task3/","title":"\u0417\u0430\u0434\u0430\u0447\u0430 3. \u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI \u0447\u0435\u0440\u0435\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u044c","text":""},{"location":"lab3/task3/#1-celery-redis","title":"1. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c Celery \u0438 Redis","text":"<p>\u0411\u044b\u043b\u0438 \u0434\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0434\u043b\u044f Celery \u0438 Redis \u0432 \u043f\u0440\u043e\u0435\u043a\u0442. Celery \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u0434\u0430\u0447 \u0432 \u0444\u043e\u043d\u0435, \u0430 Redis \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0442\u044c \u0432 \u0440\u043e\u043b\u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0437\u0430\u0434\u0430\u0447 \u0438 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432.</p>"},{"location":"lab3/task3/#2-celery","title":"2. \u041d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c Celery","text":"<p>\u0411\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d \u0444\u0430\u0439\u043b \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Celery. \u0411\u044b\u043b\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 URL, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u0432 \u0444\u043e\u043d\u043e\u0432\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435.</p> <p><code>tasks.py</code></p> <pre><code>from celery import Celery\nimport requests\n\napp = Celery('tasks', broker='redis://redis:6379')\n\n@app.task\ndef db_parse_celery(urls, num):\n    params = {'num': f'{num}'}\n    response = requests.post('http://parser:8010/parse', params=params, json=urls)\n    return response.json()\n</code></pre>"},{"location":"lab3/task3/#3-docker-compose","title":"3. \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c Docker Compose \u0444\u0430\u0439\u043b","text":"<p>\u0411\u044b\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u0441\u0435\u0440\u0432\u0438\u0441\u044b \u0434\u043b\u044f Redis \u0438 Celery worker \u0432 docker-compose.yml. \u0411\u044b\u043b\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438, \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0430.</p> <pre><code>version: '3.8'\n\nservices:\n  postgres:\n    image: postgres:latest\n    container_name: postgres\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: 1234\n      POSTGRES_DB: bookcross_db\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U postgres -d bookcross_db\"]\n      interval: 45s\n      timeout: 45s\n    ports:\n      - \"5433:5432\"\n\n  bookcrossing-app:\n    build: \n      context: ./app_bookcrossing\n    container_name: bookcrossing\n    ports:\n      - \"8001:8000\"\n    depends_on:\n      postgres:\n        condition: service_healthy\n\n  parser-app:\n    build: \n      context: ./app_parser\n    container_name: parser\n    ports:\n      - \"8020:8010\"\n    depends_on:\n      postgres:\n        condition: service_healthy\n\n  redis:\n    image: redis:latest\n    ports:\n      - \"6379:6379\"\n    healthcheck:\n      test: [\"CMD\", \"redis-cli\", \"--raw\", \"incr\", \"ping\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n      start_period: 5s\n\n  celery:\n    build:\n      context: ./app_bookcrossing\n    command: celery -A app.tasks worker --loglevel=info\n    depends_on:\n      redis:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n</code></pre>"},{"location":"lab3/task3/#4","title":"4. \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430:","text":"<p>\u0411\u044b\u043b \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442 \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430. \u041c\u0430\u0440\u0448\u0440\u0443\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441 URL \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430, \u0441\u0442\u0430\u0432\u0438\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Celery \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 \u043e \u043d\u0430\u0447\u0430\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p> <pre><code>@app.post(\"/db_parse_aync\", tags=['parser'])\ndef db_parse_async(urls: List[str], num: int = 1) -&gt; TypedDict('Response', {\"status\": int, \"message\": str}):\n    response = db_parse_celery.delay(urls, num)\n    return {\"status\": 200, \"message\": \"Parsing task is called\"}\n</code></pre>"}]}